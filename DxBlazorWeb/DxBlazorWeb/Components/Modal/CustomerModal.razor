@using System.ComponentModel.DataAnnotations
@using DxBlazorWeb.Model
@using DxBlazorWeb.Services.Interface
@using DevExpress.Blazor
@inject IAppService AppService

<DxPopup @bind-Visible="Visible"
         Width="800px"
         ShowCloseButton="true"
         Context="popupContext"
         CloseOnOutsideClick="true"
         HeaderText="Khách hàng">

    <EditForm EditContext="@editContext" Context="editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <DxFormLayout>
            <DxFormLayoutItem Caption="Tên khách hàng">
                <DxTextBox @bind-Text="Customer.CustomerName" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Mã khách hàng">
                <DxTextBox @bind-Text="Customer.CustomerCode" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Người phụ trách">
                <DxTextBox @bind-Text="Customer.CustomerManager" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Chức vụ">
                <DxTextBox @bind-Text="Customer.CustomerPosition" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Email">
                <DxTextBox @bind-Text="Customer.CustomerEmail" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Số đt">
                <DxTextBox @bind-Text="Customer.CustomerPhone" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Địa chỉ">
                <DxTextBox @bind-Text="Customer.CustomerAddress" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Kakao">
                <DxTextBox @bind-Text="Customer.CustomerKakao" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Zalo">
                <DxTextBox @bind-Text="Customer.CustomerZalo" />
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" Caption="Thông tin chi tiết">
                <DxMemo @bind-Text="Customer.CustomerDetail" Rows="4" />
            </DxFormLayoutItem>

            <DxFormLayoutItem>
                <DxButton Text="@saveButtonText" SubmitFormOnClick="true"
                          RenderStyle="ButtonRenderStyle.Primary"
                          Enabled="@canClickSave" />
                <DxButton Text="Hủy" Click="OnCancelClicked" CssClass="ml-2" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public Customer Customer { get; set; } = new();
    [Parameter] public EventCallback<Customer> OnSave { get; set; }
    [Parameter] public bool IsEdit { get; set; }

    private string saveButtonText = "Lưu";
    private bool canClickSave = true;
    private EditContext editContext;

    protected override void OnParametersSet()
    {
        editContext = new EditContext(Customer);
    }

    private async Task HandleValidSubmit()
    {
        saveButtonText = IsEdit ? "Đang cập nhật..." : "Đang lưu...";
        canClickSave = false;

        bool success;
        if (IsEdit)
        {
            success = await AppService.UpdateCustomerAsync(Customer);
        }
        else
        {
            Customer.ID = Guid.NewGuid().ToString(); // GUID từ C#
            success = await AppService.AddCustomerAsync(Customer);
        }

        if (success)
        {
            saveButtonText = "Thành công!";
            await OnSave.InvokeAsync(Customer);
            await Task.Delay(400);
            await VisibleChanged.InvokeAsync(false);
        }
        else
        {
            saveButtonText = "Lỗi!";
        }

        canClickSave = true;
        saveButtonText = IsEdit ? "Cập nhật" : "Lưu";
    }

    private async Task OnCancelClicked()
    {
        await VisibleChanged.InvokeAsync(false);
    }
}
