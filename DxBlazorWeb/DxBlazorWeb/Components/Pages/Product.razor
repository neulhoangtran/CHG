@page "/product"
@using DxBlazorWeb.Services.Interface
@using DevExpress.Blazor
@using DxBlazorWeb.Components.Modal
@using DxBlazorWeb.Model
@inject IAppService AppService
@inject IProductService ProductService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Sản phẩm</PageTitle>
<PageHeader Title="Quản lý sản phẩm" />
<style>
    .dxbl-tabs.dxbl-tabs-top > .dxbl-tabs-tablist {
    margin-bottom: 12px;
    }
</style>

<div class="main-content">
    <div class="d-flex flex-column" style="width:100%">
        <DxButton Text="Thêm sản phẩm" IconCssClass="fa fa-plus"
        IconPosition="ButtonIconPosition.BeforeText"
        Click="OpenCreateModal" CssClass="mb-2" />

        <!-- Grid chỉ hiển thị các cột của ProductIdentityModel -->
        <DxGrid Data="ProductList" ShowFilterRow="false" PageSize="12" 
        ShowGroupPanel="false" ColumnResizeMode="GridColumnResizeMode.NextColumn">
            <Columns>
                <DxGridDataColumn Caption="Thao tác" Width="160px">
                    <CellDisplayTemplate Context="context">
                        <DxButton Click="@(() => EditProduct((SanPham)context.DataItem))"
                                  IconCssClass="fa fa-edit"
                                  RenderStyle="ButtonRenderStyle.Secondary"
                                  Context="btnContext"
                                  CssClass="me-1">
                            Sửa
                        </DxButton>

                        <DxButton Click="@(() => DeleteProduct((SanPham)context.DataItem))"
                                  IconCssClass="fa fa-trash"
                                  RenderStyle="ButtonRenderStyle.Danger"
                                  Context="btnContext"
                                  RenderStyleMode="ButtonRenderStyleMode.Outline">
                            Xóa
                        </DxButton>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName="MA_SP" Caption="ID (MA_SP)" Width="260px" />
                <DxGridDataColumn FieldName="TEN_SAN_PHAM" Caption="Tên sản phẩm" />
                <DxGridDataColumn FieldName="MA_HANG"      Caption="Mã hàng" Width="140px" />
                <DxGridDataColumn FieldName="MA_KHACH_HANG" Caption="Mã KH" Width="120px" />
                <DxGridDataColumn FieldName="MA_LO_HANG" Caption="Lô hàng" Width="140px" />
                <DxGridDataColumn FieldName="MA_NHOM_HANG" Caption="Nhóm hàng" Width="140px" />
            </Columns>
        </DxGrid>
    </div>
</div>

<!-- Gọi modal -->
<ProductModal @bind-Visible="isProductModalVisible"
              EditItem="editItem"
              OnSave="OnProductSaved"
              IsEdit="isEdit" />

@code {
    // state của modal
    private bool isProductModalVisible = false;
    private bool isEdit = false;
    private SanPham? editItem = null;
    public List<SanPham> ProductList { set; get;  } = new();
    private void OpenCreateModal()
    {
        isEdit = false;
        isProductModalVisible = true;
    }

    private async Task OnProductSaved(SanPham saved)
    {
        isProductModalVisible = false;
        await JSRuntime.InvokeVoidAsync("console.log", $"Saved product: {saved.MA_HANG}");

        // Cập nhật lại danh sách nếu cần
        ProductList = await ProductService.GetAllProductsAsync();
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        ProductList = await ProductService.GetAllProductsAsync();
    }
    private async void EditProduct(SanPham item)
    {
        isEdit = true;
        editItem = item;
        isProductModalVisible = true;

        await JSRuntime.InvokeVoidAsync("console.log", $"Edit: {item.MA_SP}");
    }

    private async void DeleteProduct(SanPham item)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xoá sản phẩm [{item.TEN_SAN_PHAM}]?");
        if (confirm)
        {
            // await ProductService.DeleteProductAsync(item.MA_SP); cần triển khai
            // ProductList = await ProductService.GetAllProductsAsync();
            // StateHasChanged();
        }
    }

}
